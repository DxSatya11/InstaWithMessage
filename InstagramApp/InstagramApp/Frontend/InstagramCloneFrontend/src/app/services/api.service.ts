//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { environment } from 'src/environment/env';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({providedIn:'root'})
export class Client {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : environment.api.apiUrl;
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    follow(body: FollowingCommand | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/Follow";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFollow(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFollow(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processFollow(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createPassWord(id: number, body: CreatePasswordCommand | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/Password/CreatePassWordAsync/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreatePassWord(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreatePassWord(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processCreatePassWord(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse>(null as any);
    }

    /**
     * @param userData (optional) 
     * @param password (optional) 
     * @return Success
     */
    userLogin(userData: string | undefined, password: string | undefined): Observable<ApiResponse> {
        let url_ = this.baseUrl + "/api/Password/UserLoginAsync?";
        if (userData === null)
            throw new Error("The parameter 'userData' cannot be null.");
        else if (userData !== undefined)
            url_ += "UserData=" + encodeURIComponent("" + userData) + "&";
        if (password === null)
            throw new Error("The parameter 'password' cannot be null.");
        else if (password !== undefined)
            url_ += "Password=" + encodeURIComponent("" + password) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponse>;
        }));
    }

    protected processUserLogin(response: HttpResponseBase): Observable<ApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApiResponse>(null as any);
    }

    /**
     * @param post (optional) 
     * @return Success
     */
    uploadPost(id: number, post: FileParameter | undefined): Observable<AddPostResponse> {
        let url_ = this.baseUrl + "/api/Posts/UploadPost/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (post === null || post === undefined)
            throw new Error("The parameter 'post' cannot be null.");
        else
            content_.append("post", post.data, post.fileName ? post.fileName : "post");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadPost(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddPostResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddPostResponse>;
        }));
    }

    protected processUploadPost(response: HttpResponseBase): Observable<AddPostResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddPostResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddPostResponse>(null as any);
    }

    /**
     * @param userName (optional) 
     * @param givenName (optional) 
     * @param email (optional) 
     * @param dOB (optional) 
     * @param contactNo (optional) 
     * @param country (optional) 
     * @param bio (optional) 
     * @param profilPicture (optional) 
     * @return Success
     */
    createUser(userName: string | undefined, givenName: string | undefined, email: string | undefined, dOB: string | undefined, contactNo: number | undefined, country: string | undefined, bio: string | undefined, profilPicture: FileParameter | undefined): Observable<CreateUserResponse> {
        let url_ = this.baseUrl + "/api/User/CreateUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (userName === null || userName === undefined)
            throw new Error("The parameter 'userName' cannot be null.");
        else
            content_.append("UserName", userName.toString());
        if (givenName === null || givenName === undefined)
            throw new Error("The parameter 'givenName' cannot be null.");
        else
            content_.append("GivenName", givenName.toString());
        if (email === null || email === undefined)
            throw new Error("The parameter 'email' cannot be null.");
        else
            content_.append("Email", email.toString());
        if (dOB === null || dOB === undefined)
            throw new Error("The parameter 'dOB' cannot be null.");
        else
            content_.append("DOB", dOB.toString());
        if (contactNo === null || contactNo === undefined)
            throw new Error("The parameter 'contactNo' cannot be null.");
        else
            content_.append("ContactNo", contactNo.toString());
        if (country === null || country === undefined)
            throw new Error("The parameter 'country' cannot be null.");
        else
            content_.append("Country", country.toString());
        if (bio === null || bio === undefined)
            throw new Error("The parameter 'bio' cannot be null.");
        else
            content_.append("Bio", bio.toString());
        if (profilPicture === null || profilPicture === undefined)
            throw new Error("The parameter 'profilPicture' cannot be null.");
        else
            content_.append("ProfilPicture", profilPicture.data, profilPicture.fileName ? profilPicture.fileName : "ProfilPicture");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CreateUserResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CreateUserResponse>;
        }));
    }

    protected processCreateUser(response: HttpResponseBase): Observable<CreateUserResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateUserResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateUserResponse>(null as any);
    }

    /**
     * @return Success
     */
    user(userId: number): Observable<GetUserRequest> {
        let url_ = this.baseUrl + "/api/User/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetUserRequest>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetUserRequest>;
        }));
    }

    protected processUser(response: HttpResponseBase): Observable<GetUserRequest> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserRequest.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetUserRequest>(null as any);
    }

    /**
     * @return Success
     */
    getFollowingUserData(userId: number): Observable<UserHomepageResponse> {
        let url_ = this.baseUrl + "/api/User/GetFollowingUserDataAsync/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFollowingUserData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFollowingUserData(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserHomepageResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserHomepageResponse>;
        }));
    }

    protected processGetFollowingUserData(response: HttpResponseBase): Observable<UserHomepageResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserHomepageResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserHomepageResponse>(null as any);
    }

    /**
     * @return Success
     */
    getAllUser(userId: number): Observable<GetAllUserResponses> {
        let url_ = this.baseUrl + "/api/User/GetAllUserAsync/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAllUserResponses>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAllUserResponses>;
        }));
    }

    protected processGetAllUser(response: HttpResponseBase): Observable<GetAllUserResponses> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetAllUserResponses.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetAllUserResponses>(null as any);
    }
}

export class AddPostResponse implements IAddPostResponse {
    message?: string | undefined;

    constructor(data?: IAddPostResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): AddPostResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddPostResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data;
    }
}

export interface IAddPostResponse {
    message?: string | undefined;
}

export class ApiResponse implements IApiResponse {
    id?: number;
    messsage?: string | undefined;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.messsage = _data["messsage"];
        }
    }

    static fromJS(data: any): ApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["messsage"] = this.messsage;
        return data;
    }
}

export interface IApiResponse {
    id?: number;
    messsage?: string | undefined;
}

export class CreatePasswordCommand implements ICreatePasswordCommand {
    password?: string | undefined;

    constructor(data?: ICreatePasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): CreatePasswordCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePasswordCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password;
        return data;
    }
}

export interface ICreatePasswordCommand {
    password?: string | undefined;
}

export class CreateUserResponse implements ICreateUserResponse {
    usertId?: number;
    message?: string | undefined;

    constructor(data?: ICreateUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.usertId = _data["usertId"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): CreateUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["usertId"] = this.usertId;
        data["message"] = this.message;
        return data;
    }
}

export interface ICreateUserResponse {
    usertId?: number;
    message?: string | undefined;
}

export class FollowingCommand implements IFollowingCommand {
    usertId?: number;
    followingUserId?: number;

    constructor(data?: IFollowingCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.usertId = _data["usertId"];
            this.followingUserId = _data["followingUserId"];
        }
    }

    static fromJS(data: any): FollowingCommand {
        data = typeof data === 'object' ? data : {};
        let result = new FollowingCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["usertId"] = this.usertId;
        data["followingUserId"] = this.followingUserId;
        return data;
    }
}

export interface IFollowingCommand {
    usertId?: number;
    followingUserId?: number;
}

export class GetAllUserResponse implements IGetAllUserResponse {
    id?: number;
    userName?: string | undefined;
    profilPicture?: string | undefined;

    constructor(data?: IGetAllUserResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.profilPicture = _data["profilPicture"];
        }
    }

    static fromJS(data: any): GetAllUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["profilPicture"] = this.profilPicture;
        return data;
    }
}

export interface IGetAllUserResponse {
    id?: number;
    userName?: string | undefined;
    profilPicture?: string | undefined;
}

export class GetAllUserResponses implements IGetAllUserResponses {
    getAllUserResponse?: GetAllUserResponse[] | undefined;

    constructor(data?: IGetAllUserResponses) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["getAllUserResponse"])) {
                this.getAllUserResponse = [] as any;
                for (let item of _data["getAllUserResponse"])
                    this.getAllUserResponse!.push(GetAllUserResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllUserResponses {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllUserResponses();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.getAllUserResponse)) {
            data["getAllUserResponse"] = [];
            for (let item of this.getAllUserResponse)
                data["getAllUserResponse"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetAllUserResponses {
    getAllUserResponse?: GetAllUserResponse[] | undefined;
}

export class GetPostsRequest implements IGetPostsRequest {
    userPosts?: string | undefined;

    constructor(data?: IGetPostsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userPosts = _data["userPosts"];
        }
    }

    static fromJS(data: any): GetPostsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetPostsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userPosts"] = this.userPosts;
        return data;
    }
}

export interface IGetPostsRequest {
    userPosts?: string | undefined;
}

export class GetUserRequest implements IGetUserRequest {
    userid?: number;
    userName?: string | undefined;
    givenName?: string | undefined;
    bio?: string | undefined;
    profilPicture?: string | undefined;
    followingList?: number | undefined;
    followersList?: number | undefined;
    posts?: GetPostsRequest[] | undefined;

    constructor(data?: IGetUserRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userid = _data["userid"];
            this.userName = _data["userName"];
            this.givenName = _data["givenName"];
            this.bio = _data["bio"];
            this.profilPicture = _data["profilPicture"];
            this.followingList = _data["followingList"];
            this.followersList = _data["followersList"];
            if (Array.isArray(_data["posts"])) {
                this.posts = [] as any;
                for (let item of _data["posts"])
                    this.posts!.push(GetPostsRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userid"] = this.userid;
        data["userName"] = this.userName;
        data["givenName"] = this.givenName;
        data["bio"] = this.bio;
        data["profilPicture"] = this.profilPicture;
        data["followingList"] = this.followingList;
        data["followersList"] = this.followersList;
        if (Array.isArray(this.posts)) {
            data["posts"] = [];
            for (let item of this.posts)
                data["posts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetUserRequest {
    userid?: number;
    userName?: string | undefined;
    givenName?: string | undefined;
    bio?: string | undefined;
    profilPicture?: string | undefined;
    followingList?: number | undefined;
    followersList?: number | undefined;
    posts?: GetPostsRequest[] | undefined;
}

export class UserHomepageRequest implements IUserHomepageRequest {
    userid?: number;
    userName?: string | undefined;
    profilPicture?: string | undefined;
    posts?: string | undefined;

    constructor(data?: IUserHomepageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userid = _data["userid"];
            this.userName = _data["userName"];
            this.profilPicture = _data["profilPicture"];
            this.posts = _data["posts"];
        }
    }

    static fromJS(data: any): UserHomepageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UserHomepageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userid"] = this.userid;
        data["userName"] = this.userName;
        data["profilPicture"] = this.profilPicture;
        data["posts"] = this.posts;
        return data;
    }
}

export interface IUserHomepageRequest {
    userid?: number;
    userName?: string | undefined;
    profilPicture?: string | undefined;
    posts?: string | undefined;
}

export class UserHomepageResponse implements IUserHomepageResponse {
    userHomepageRequests?: UserHomepageRequest[] | undefined;

    constructor(data?: IUserHomepageResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userHomepageRequests"])) {
                this.userHomepageRequests = [] as any;
                for (let item of _data["userHomepageRequests"])
                    this.userHomepageRequests!.push(UserHomepageRequest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserHomepageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserHomepageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userHomepageRequests)) {
            data["userHomepageRequests"] = [];
            for (let item of this.userHomepageRequests)
                data["userHomepageRequests"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserHomepageResponse {
    userHomepageRequests?: UserHomepageRequest[] | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}